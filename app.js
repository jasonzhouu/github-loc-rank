!function(e){var r={};function t(s){if(r[s])return r[s].exports;var o=r[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,s){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(s,o,function(r){return e[r]}.bind(null,o));return s},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=7)}([function(e,r,t){"use strict";function s(){try{return navigator.userAgent}catch(e){return"<environment undetectable>"}}t.d(r,"a",(function(){return s}))},function(e,r,t){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function s(e){return!0==(null!=(r=e)&&"object"==typeof r&&!1===Array.isArray(r))&&"[object Object]"===Object.prototype.toString.call(e);
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var r}function o(e){var r,t;return!1!==s(e)&&("function"==typeof(r=e.constructor)&&(!1!==s(t=r.prototype)&&!1!==t.hasOwnProperty("isPrototypeOf")))}t.r(r),t.d(r,"request",(function(){return k}));var n=t(0);function i(e,r,t){if("string"==typeof r){let[e,s]=r.split(" ");t=Object.assign(s?{method:e,url:s}:{url:e},t)}else t=Object.assign({},r);var s;t.headers=(s=t.headers)?Object.keys(s).reduce((e,r)=>(e[r.toLowerCase()]=s[r],e),{}):{};const n=function e(r,t){const s=Object.assign({},r);return Object.keys(t).forEach(n=>{o(t[n])&&n in r?s[n]=e(r[n],t[n]):Object.assign(s,{[n]:t[n]})}),s}(e||{},t);return e&&e.mediaType.previews.length&&(n.mediaType.previews=e.mediaType.previews.filter(e=>!n.mediaType.previews.includes(e)).concat(n.mediaType.previews)),n.mediaType.previews=n.mediaType.previews.map(e=>e.replace(/-preview/,"")),n}const a=/\{[^}]+\}/g;function c(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function p(e,r){return Object.keys(e).filter(e=>!r.includes(e)).reduce((r,t)=>(r[t]=e[t],r),{})}function l(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function u(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function m(e,r,t){return r="+"===e||"#"===e?l(r):u(r),t?u(t)+"="+r:r}function d(e){return null!=e}function g(e){return";"===e||"&"===e||"?"===e}function T(e,r){var t=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,s,o){if(s){let e="";const o=[];if(-1!==t.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach((function(t){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);o.push(function(e,r,t,s){var o=e[t],n=[];if(d(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),n.push(m(r,o,g(r)?t:""));else if("*"===s)Array.isArray(o)?o.filter(d).forEach((function(e){n.push(m(r,e,g(r)?t:""))})):Object.keys(o).forEach((function(e){d(o[e])&&n.push(m(r,o[e],e))}));else{const e=[];Array.isArray(o)?o.filter(d).forEach((function(t){e.push(m(r,t))})):Object.keys(o).forEach((function(t){d(o[t])&&(e.push(u(t)),e.push(m(r,o[t].toString())))})),g(r)?n.push(u(t)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===r?d(o)&&n.push(u(t)):""!==o||"&"!==r&&"?"!==r?""===o&&n.push(""):n.push(u(t)+"=");return n}(r,e,s[1],s[2]||s[3]))})),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return l(o)}))}function E(e){let r,t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{+$1}"),o=Object.assign({},e.headers),n=p(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const r=e.match(a);return r?r.map(c).reduce((e,r)=>e.concat(r),[]):[]}(s);var l;s=(l=s,{expand:T.bind(null,l)}).expand(n),/^http/.test(s)||(s=e.baseUrl+s);const u=p(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),e.mediaType.previews.length)){const r=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=r.concat(e.mediaType.previews).map(r=>`application/vnd.github.${r}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(t)?s=function(e,r){const t=/\?/.test(e)?"&":"?",s=Object.keys(r);return 0===s.length?e:e+t+s.map(e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`).join("&")}(s,u):"data"in u?r=u.data:Object.keys(u).length?r=u:o["content-length"]=0,o["content-type"]||void 0===r||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&void 0===r&&(r=""),Object.assign({method:t,url:s,headers:o},void 0!==r?{body:r}:null,e.request?{request:e.request}:null)}function w(e,r,t){return E(i(e,r,t))}const h=function e(r,t){const s=i(r,t),o=w.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:e.bind(null,s),merge:i.bind(null,s),parse:E})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/5.5.3 ${Object(n.a)()}`},mediaType:{format:"",previews:[]}});var b=t(4),f=t.n(b);class y extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var _=t(5);const v=t.n(_)()(e=>console.warn(e));class G extends Error{constructor(e,r,t){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=r,Object.defineProperty(this,"code",{get:()=>(v(new y("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),r)}),this.headers=t.headers||{};const s=Object.assign({},t.request);t.request.headers.authorization&&(s.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=s}}function P(e){(o(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let r,t,s={};return(e.request&&e.request.fetch||f.a)(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(o=>{t=o.url,r=o.status;for(const e of o.headers)s[e[0]]=e[1];if(204===r||205===r)return;if("HEAD"===e.method){if(r<400)return;throw new G(o.statusText,r,{headers:s,request:e})}if(304===r)throw new G("Not modified",r,{headers:s,request:e});if(r>=400)return o.text().then(t=>{const o=new G(t,r,{headers:s,request:e});try{let e=JSON.parse(o.message);Object.assign(o,e);let r=e.errors;o.message=o.message+": "+r.map(JSON.stringify).join(", ")}catch(e){}throw o});const n=o.headers.get("content-type");return/application\/json/.test(n)?o.json():!n||/^text\/|charset=utf-8$/.test(n)?o.text():function(e){return e.arrayBuffer()}(o)}).then(e=>({status:r,url:t,headers:s,data:e})).catch(r=>{if(r instanceof G)throw r;throw new G(r.message,500,{headers:s,request:e})})}const k=function e(r,t){const s=r.defaults(t);return Object.assign((function(r,t){const o=s.merge(r,t);if(!o.request||!o.request.hook)return P(s.parse(o));const n=(e,r)=>P(s.parse(s.merge(e,r)));return Object.assign(n,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(n,o)}),{endpoint:s,defaults:e.bind(null,s)})}(h,{headers:{"user-agent":`octokit-request.js/5.3.2 ${Object(n.a)()}`}})},function(e,r,t){"use strict";t.r(r),t.d(r,"Octokit",(function(){return w}));var s=t(0),o=t(3),n=t(1),i=t(6);async function a(e){const r=3===e.split(/\./).length?"app":/^v\d+\./.test(e)?"installation":"oauth";return{type:"token",token:e,tokenType:r}}async function c(e,r,t,s){const o=r.endpoint.merge(t,s);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),r(o)}class p{constructor(e={}){const r=new o.Collection,t={baseUrl:n.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(t.headers["user-agent"]=[e.userAgent,`octokit-core.js/2.4.2 ${Object(s.a)()}`].filter(Boolean).join(" "),e.baseUrl&&(t.baseUrl=e.baseUrl),e.previews&&(t.mediaType.previews=e.previews),e.timeZone&&(t.headers["time-zone"]=e.timeZone),this.request=n.request.defaults(t),this.graphql=Object(i.withCustomRequest)(this.request).defaults(t),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),this.hook=r,e.authStrategy){const t=e.authStrategy(Object.assign({request:this.request},e.auth));r.wrap("request",t.hook),this.auth=t}else if(e.auth){const t=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(a.bind(null,e),{hook:c.bind(null,e)})}(e.auth);r.wrap("request",t.hook),this.auth=t}else this.auth=async()=>({type:"unauthenticated"});this.constructor.plugins.forEach(r=>{Object.assign(this,r(this,e))})}static defaults(e){return class extends(this){constructor(...r){const t=r[0]||{};super(Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null))}}}static plugin(e){var r;const t=this.plugins,s=Array.isArray(e)?e:[e];return(r=class extends(this){}).plugins=t.concat(s.filter(e=>!t.includes(e))),r}}p.VERSION="2.4.2",p.plugins=[];function l(e){e.hook.wrap("request",(r,t)=>{e.log.debug("request",t);const s=Date.now(),o=e.request.endpoint.parse(t),n=o.url.replace(t.baseUrl,"");return r(t).then(r=>(e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-s}ms`),r)).catch(r=>{throw e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-s}ms`),r})})}l.VERSION="1.0.0";function u(e,r,t){const s=e.request.endpoint(r,t),o=s.method,n=s.headers;let i=s.url;return{[Symbol.asyncIterator]:()=>({next:()=>i?e.request({method:o,url:i,headers:n}).then(e=>(function(e,r,t){if(!("total_count"in t.data&&!("url"in t.data)))return;const s=t.data.incomplete_results,o=t.data.repository_selection,n=t.data.total_count;delete t.data.incomplete_results,delete t.data.repository_selection,delete t.data.total_count;const i=Object.keys(t.data)[0],a=t.data[i];t.data=a,void 0!==s&&(t.data.incomplete_results=s),void 0!==o&&(t.data.repository_selection=o),t.data.total_count=n}(0,0,e),i=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e})):Promise.resolve({done:!0})})}}function m(e,r,t,s){return"function"==typeof t&&(s=t,t=void 0),function e(r,t,s,o){return s.next().then(n=>{if(n.done)return t;let i=!1;return t=t.concat(o?o(n.value,(function(){i=!0})):n.value.data),i?t:e(r,t,s,o)})}(e,[],u(e,r,t)[Symbol.asyncIterator](),s)}function d(e){return{paginate:Object.assign(m.bind(null,e),{iterator:u.bind(null,e)})}}d.VERSION="2.0.2";const g={actions:{cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateSecretForRepo:["PUT /repos/{owner}/{repo}/actions/secrets/{name}"],createRegistrationToken:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveToken:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteSecretFromRepo:["DELETE /repos/{owner}/{repo}/actions/secrets/{name}"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getSecret:["GET /repos/{owner}/{repo}/actions/secrets/{name}"],getSelfHostedRunner:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowJob:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listDownloadsForSelfHostedRunnerApplication:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listRepoWorkflowRuns:["GET /repos/{owner}/{repo}/actions/runs"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listSecretsForRepo:["GET /repos/{owner}/{repo}/actions/secrets"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowJobLogs:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],removeSelfHostedRunner:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"]},activity:{checkStarringRepo:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscription:["GET /notifications/threads/{thread_id}/subscription"],listEventsForOrg:["GET /users/{username}/events/orgs/{org}"],listEventsForUser:["GET /users/{username}/events"],listFeeds:["GET /feeds"],listNotifications:["GET /notifications"],listNotificationsForRepo:["GET /repos/{owner}/{repo}/notifications"],listPublicEvents:["GET /events"],listPublicEventsForOrg:["GET /orgs/{org}/events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markAsRead:["PUT /notifications"],markNotificationsAsReadForRepo:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepo:["PUT /user/starred/{owner}/{repo}"],unstarRepo:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],checkAccountIsAssociatedWithAny:["GET /marketplace_listing/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccount"]}],checkAccountIsAssociatedWithAnyStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccountStubbed"]}],checkToken:["POST /applications/{client_id}/token",{mediaType:{previews:["doctor-strange"]}}],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationToken:["POST /app/installations/{installation_id}/access_tokens",{mediaType:{previews:["machine-man"]}}],deleteAuthorization:["DELETE /applications/{client_id}/grant",{mediaType:{previews:["doctor-strange"]}}],deleteInstallation:["DELETE /app/installations/{installation_id}",{mediaType:{previews:["gambit","machine-man"]}}],deleteToken:["DELETE /applications/{client_id}/token",{mediaType:{previews:["doctor-strange"]}}],getAuthenticated:["GET /app",{mediaType:{previews:["machine-man"]}}],getBySlug:["GET /apps/{app_slug}",{mediaType:{previews:["machine-man"]}}],getInstallation:["GET /app/installations/{installation_id}",{mediaType:{previews:["machine-man"]}}],getOrgInstallation:["GET /orgs/{org}/installation",{mediaType:{previews:["machine-man"]}}],getRepoInstallation:["GET /repos/{owner}/{repo}/installation",{mediaType:{previews:["machine-man"]}}],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation",{mediaType:{previews:["machine-man"]}}],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listAccountsUserOrOrgOnPlan:["GET /marketplace_listing/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlan"]}],listAccountsUserOrOrgOnPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlanStubbed"]}],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories",{mediaType:{previews:["machine-man"]}}],listInstallations:["GET /app/installations",{mediaType:{previews:["machine-man"]}}],listInstallationsForAuthenticatedUser:["GET /user/installations",{mediaType:{previews:["machine-man"]}}],listMarketplacePurchasesForAuthenticatedUser:["GET /user/marketplace_purchases",{},{renamed:["apps","listSubscriptionsForAuthenticatedUser"]}],listMarketplacePurchasesForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed",{},{renamed:["apps","listSubscriptionsForAuthenticatedUserStubbed"]}],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listRepos:["GET /installation/repositories",{mediaType:{previews:["machine-man"]}}],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],resetToken:["PATCH /applications/{client_id}/token",{mediaType:{previews:["doctor-strange"]}}],revokeInstallationToken:["DELETE /installation/token",{mediaType:{previews:["gambit"]}}]},checks:{create:["POST /repos/{owner}/{repo}/check-runs",{mediaType:{previews:["antiope"]}}],createSuite:["POST /repos/{owner}/{repo}/check-suites",{mediaType:{previews:["antiope"]}}],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",{mediaType:{previews:["antiope"]}}],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",{mediaType:{previews:["antiope"]}}],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs",{mediaType:{previews:["antiope"]}}],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",{mediaType:{previews:["antiope"]}}],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites",{mediaType:{previews:["antiope"]}}],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",{mediaType:{previews:["antiope"]}}],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences",{mediaType:{previews:["antiope"]}}],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],getConductCode:["GET /codes_of_conduct/{key}",{mediaType:{previews:["scarlet-witch"]}}],getForRepo:["GET /repos/{owner}/{repo}/community/code_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],listConductCodes:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}},{renamed:["codesOfConduct","getAllCodesOfConduct"]}]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listPublicForUser:["GET /users/{username}/gists",{},{renamed:["gists","listForUser"]}],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getTemplate:["GET /gitignore/templates/{name}"],listTemplates:["GET /gitignore/templates"]},interactions:{addOrUpdateRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],addOrUpdateRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkAssignee:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",{mediaType:{previews:["mockingbird"]}}],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestonesForRepo:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","removeAllLabels"]}],replaceAllLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],replaceLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","replaceAllLabels"]}],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getForRepo:["GET /repos/{owner}/{repo}/license"],listCommonlyUsed:["GET /licenses"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportProgress:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],listForAuthenticatedUser:["GET /user/migrations",{mediaType:{previews:["wyandotte"]}}],listForOrg:["GET /orgs/{org}/migrations",{mediaType:{previews:["wyandotte"]}}],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],listReposForUser:["GET /user/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addOrUpdateMembership:["PUT /orgs/{org}/memberships/{username}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembership:["GET /orgs/{org}/members/{username}"],checkPublicMembership:["GET /orgs/{org}/public_members/{username}"],concealMembership:["DELETE /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createHook:["POST /orgs/{org}/hooks"],createInvitation:["POST /orgs/{org}/invitations"],deleteHook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getHook:["GET /orgs/{org}/hooks/{hook_id}"],getMembership:["GET /orgs/{org}/memberships/{username}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],list:["GET /organizations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listHooks:["GET /orgs/{org}/hooks"],listInstallations:["GET /orgs/{org}/installations",{mediaType:{previews:["machine-man"]}}],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMemberships:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],pingHook:["POST /orgs/{org}/hooks/{hook_id}/pings"],publicizeMembership:["PUT /orgs/{org}/public_members/{username}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembership:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateHook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateMembership:["PATCH /user/memberships/orgs/{org}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],createCard:["POST /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],createColumn:["POST /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],createForAuthenticatedUser:["POST /user/projects",{mediaType:{previews:["inertia"]}}],createForOrg:["POST /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],createForRepo:["POST /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],delete:["DELETE /projects/{project_id}",{mediaType:{previews:["inertia"]}}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],deleteColumn:["DELETE /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],get:["GET /projects/{project_id}",{mediaType:{previews:["inertia"]}}],getCard:["GET /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],getColumn:["GET /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],listCards:["GET /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],listCollaborators:["GET /projects/{project_id}/collaborators",{mediaType:{previews:["inertia"]}}],listColumns:["GET /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],listForOrg:["GET /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],listForRepo:["GET /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],listForUser:["GET /users/{username}/projects",{mediaType:{previews:["inertia"]}}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{mediaType:{previews:["inertia"]}}],moveColumn:["POST /projects/columns/{column_id}/moves",{mediaType:{previews:["inertia"]}}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],reviewUserPermissionLevel:["GET /projects/{project_id}/collaborators/{username}/permission",{mediaType:{previews:["inertia"]}}],update:["PATCH /projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateCard:["PATCH /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],updateColumn:["PATCH /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewCommentReply:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReviewRequest:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],deleteComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewRequest:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],getCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listReviewRequests:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",{mediaType:{previews:["lydian"]}}],updateComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],delete:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{renamed:["reactions","deleteLegacy"]}],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteLegacy:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{deprecated:"octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"}],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}"],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addDeployKey:["POST /repos/{owner}/{repo}/keys"],addProtectedBranchAdminEnforcement:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],addProtectedBranchAppRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addProtectedBranchRequiredSignatures:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],addProtectedBranchRequiredStatusChecksContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addProtectedBranchTeamRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addProtectedBranchUserRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createHook:["POST /repos/{owner}/{repo}/hooks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateFile:["PUT /repos/{owner}/{repo}/contents/{path}"],createRelease:["POST /repos/{owner}/{repo}/releases"],createStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate",{mediaType:{previews:["baptiste"]}}],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDownload:["DELETE /repos/{owner}/{repo}/downloads/{download_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteHook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],disablePagesSite:["DELETE /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],enablePagesSite:["POST /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],get:["GET /repos/{owner}/{repo}"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getArchiveLink:["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getContents:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getDownload:["GET /repos/{owner}/{repo}/downloads/{download_id}"],getHook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getProtectedBranchAdminEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getProtectedBranchPullRequestReviewEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getProtectedBranchRequiredSignatures:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],getProtectedBranchRequiredStatusChecks:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getProtectedBranchRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],list:["GET /user/repos",{},{renamed:["repos","listForAuthenticatedUser"]}],listAssetsForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",{mediaType:{previews:["groot"]}}],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitComments:["GET /repos/{owner}/{repo}/comments"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listDownloads:["GET /repos/{owner}/{repo}/downloads"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listHooks:["GET /repos/{owner}/{repo}/hooks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listProtectedBranchRequiredStatusChecksContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",{mediaType:{previews:["groot"]}}],listReleases:["GET /repos/{owner}/{repo}/releases"],listStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","getAllTopics"]}],merge:["POST /repos/{owner}/{repo}/merges"],pingHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],removeBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],removeProtectedBranchAdminEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],removeProtectedBranchAppRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeProtectedBranchPullRequestReviewEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],removeProtectedBranchRequiredSignatures:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],removeProtectedBranchRequiredStatusChecks:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeProtectedBranchRequiredStatusChecksContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeProtectedBranchRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],removeProtectedBranchTeamRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeProtectedBranchUserRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],replaceProtectedBranchAppRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],replaceProtectedBranchRequiredStatusChecksContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],replaceProtectedBranchTeamRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],replaceProtectedBranchUserRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","replaceAllTopics"]}],requestPageBuild:["POST /repos/{owner}/{repo}/pages/builds"],retrieveCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],testPushHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateHook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateProtectedBranchPullRequestReviewEnforcement:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateProtectedBranchRequiredStatusChecks:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits",{mediaType:{previews:["cloak"]}}],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},teams:{addOrUpdateMembershipInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],addOrUpdateRepoInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkManagesRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{mediaType:{previews:["inertia"]}}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],reviewProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmails:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowing:["GET /user/following/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],createGpgKey:["POST /user/gpg_keys"],createPublicKey:["POST /user/keys"],deleteEmails:["DELETE /user/emails"],deleteGpgKey:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicKey:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKey:["GET /user/gpg_keys/{gpg_key_id}"],getPublicKey:["GET /user/keys/{key_id}"],list:["GET /users"],listBlocked:["GET /user/blocks"],listEmails:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForAuthenticatedUser:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticated"]}],listFollowingForUser:["GET /users/{username}/following"],listGpgKeys:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmails:["GET /user/public_emails"],listPublicKeys:["GET /user/keys"],listPublicKeysForUser:["GET /users/{username}/keys"],togglePrimaryEmailVisibility:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};function T(e,r,t,s,o){const n=e.request.defaults(s);return Object.assign((function(...s){let i=n.endpoint.merge(...s);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[s,n]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${s}.${n}()`)}return o.deprecated&&e.log.warn(o.deprecated),n(...s)}),n)}function E(e){return function(e,r){const t={};for(const[s,o]of Object.entries(r))for(const[r,n]of Object.entries(o)){const[o,i,a]=n,[c,p]=o.split(/ /),l=Object.assign({method:c,url:p},i);t[s]||(t[s]={});const u=t[s];a?u[r]=T(e,s,r,l,a):u[r]=e.request.defaults(l)}return t}(e,g)}E.VERSION="3.3.1";const w=p.plugin([l,E,d]).defaults({userAgent:"octokit-rest.js/17.1.0"})},function(e,r,t){var s=t(9),o=t(10),n=t(11),i=Function.bind,a=i.bind(i);function c(e,r,t){var s=a(n,null).apply(null,t?[r,t]:[r]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach((function(s){var n=t?[r,s,t]:[r,s];e[s]=e.api[s]=a(o,null).apply(null,n)}))}function p(){var e={registry:{}},r=s.bind(null,e);return c(r,e),r}var l=!1;function u(){return l||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),l=!0),p()}u.Singular=function(){var e={registry:{}},r=s.bind(null,e,"h");return c(r,e,"h"),r}.bind(),u.Collection=p.bind(),e.exports=u,e.exports.Hook=u,e.exports.Singular=u.Singular,e.exports.Collection=u.Collection},function(e,r,t){"use strict";var s=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s)return s;throw new Error("unable to locate global object")}();e.exports=r=s.fetch,r.default=s.fetch.bind(s),r.Headers=s.Headers,r.Request=s.Request,r.Response=s.Response},function(e,r,t){var s=t(12);function o(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function n(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=!1,r}e.exports=s(o),e.exports.strict=s(n),o.proto=o((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return n(this)},configurable:!0})}))},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var s=t(1),o=t(13);class n extends Error{constructor(e,r){super(r.data.errors[0].message),Object.assign(this,r.data),this.name="GraphqlError",this.request=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const i=["method","baseUrl","url","headers","request","query"];function a(e,r){const t=e.defaults(r);return Object.assign((e,r)=>function(e,r,t){t=t="string"==typeof r?Object.assign({query:r},t):r;const s=Object.keys(t).reduce((e,r)=>i.includes(r)?(e[r]=t[r],e):(e.variables||(e.variables={}),e.variables[r]=t[r],e),{});return e(s).then(e=>{if(e.data.errors)throw new n(s,{data:e.data});return e.data.data})}(t,e,r),{defaults:a.bind(null,t),endpoint:s.request.endpoint})}const c=a(s.request,{headers:{"user-agent":`octokit-graphql.js/4.3.1 ${o.getUserAgent()}`},method:"POST",url:"/graphql"});r.graphql=c,r.withCustomRequest=function(e){return a(e,{method:"POST",url:"/graphql"})}},function(e,r,t){const s=t(8);let o,n=localStorage.getItem("token")||"",i=parseInt(localStorage.getItem("pageLength"),10)||0,a=parseInt(localStorage.getItem("currentPage"),10)||0,c="";if(document.querySelector("input").value=n,""!==n&&0!==i&&0!==a){o=new s,o.restore({extractedData:JSON.parse(localStorage.getItem("extractedData")||"[]"),pageLength:i,currentPage:a,token:n}),p(),document.getElementById("status").textContent=`√ there are ${i} pages`,document.querySelector("input").value="",document.getElementById("load").style.display="inline-block",0===o.get().length&&setTimeout(()=>{document.querySelector("#load").click()},100)}function p(){let e=[];e=function(){if(""===c)return o.get();return o.get().filter(e=>!(!e.mainLanguage.toLowerCase||!c.toLowerCase||e.mainLanguage.toLowerCase()!==c.toLowerCase()))}(),document.querySelector("tbody").innerHTML="",e.forEach(e=>{const r=document.createElement("tr"),t=document.createElement("td"),s=document.createElement("td"),o=document.createElement("td"),n=document.createElement("td");t.append(function(e,r){const t=document.createElement("a");return t.textContent=r,t.setAttribute("href",e),t}(e.htmlUrl,e.repoName)),o.textContent=e.loc,n.textContent=e.stars,null===e.mainLanguage?s.textContent="-":s.textContent=e.mainLanguage,r.append(t,s,n,o),document.querySelector("tbody").append(r)})}function l(){document.getElementById("status").textContent="Error: failed internet connection or your token is invalid"}function u(){document.querySelectorAll("thead tr th").forEach(e=>{e.hasAttributes("aria-sort")&&e.setAttribute("aria-sort","none");const r=e.querySelector("span");r&&(r.classList.remove("ascending"),r.classList.remove("descending"))})}document.querySelector("#token").addEventListener("click",async()=>{localStorage.setItem("token",document.querySelector("input").value);const e=document.getElementById("status");e.innerHTML="";const r=document.querySelector(".lds-ellipsis").cloneNode(!0);r.style.display="inline-block",e.append(r),n=document.querySelector("input").value,o=new s,i=0,a=0,localStorage.setItem("pageLength",i),localStorage.setItem("currentPage",a),localStorage.setItem("extractedData",[]),document.querySelector("tbody").innerHTML="";try{i=await o.init(n),localStorage.setItem("currentPage",1),localStorage.setItem("pageLength",i),document.querySelector("input").value="",e.textContent=`√ there are ${i} pages`,document.getElementById("load").style.display="inline-block",document.querySelector("#load").click()}catch(e){l()}}),document.querySelector("#load").addEventListener("click",async e=>{const r=document.querySelector(".lds-ellipsis");e.target.style.display="none",r.style.display="block";try{a=await o.getOnePage(),localStorage.setItem("currentPage",a),localStorage.setItem("extractedData",JSON.stringify(o.get())),p()}catch(e){l()}e.target.style.display="inline",r.style.display="none",a>i&&(e.target.disabled="disabled",e.target.style.display="none")}),["loc","stars"].forEach(e=>{document.getElementById(e).addEventListener("click",r=>{o&&("none"===r.target.getAttribute("aria-sort")||"ascending"===r.target.getAttribute("aria-sort")?(u(),o.sort(e,"descending"),r.target.setAttribute("aria-sort","descending"),r.target.querySelector("span").classList.add("descending")):"descending"===r.target.getAttribute("aria-sort")&&(u(),o.sort(e,"ascending"),r.target.setAttribute("aria-sort","ascending"),r.target.querySelector("span").classList.add("ascending")),p())})}),document.getElementById("mainLanguage").addEventListener("change",e=>{c=e.target.value,p()})},function(e,r,t){const{Octokit:s}=t(2),o=t(14),{getOnePageRepositories:n,getLeftPagesRepositories:i}=t(15),a=t(16);e.exports=function(){let e,r=[],t=1,c=1,p="";async function l(e){const t=await a(e,p);r=r.concat(t)}this.restore=o=>{o&&(c=o.pageLength,t=o.currentPage,r=o.extractedData,p=o.token,e=new s({auth:p}))},this.init=async n=>{t=0,c=0,r=[],p=n,e=new s({auth:n});try{const{data:r,headers:t}=await e.request("https://api.github.com/user/starred");return c=o(t.link),c}catch(e){throw console.error(e),e}},this.getOnePage=async()=>{try{const{data:r}=await n({index:t,octokit:e});await l(r),t+=1}catch(e){console.error(e)}return t},this.getAllLeftPages=async()=>{const s=await i({pageLength:c,octokit:e});r=await l(s),t=c+1},this.get=()=>r,this.sort=(e,t)=>{if(["stars","loc"].includes(e))switch(t){case"ascending":r.sort((r,t)=>r[e]-t[e]);break;case"descending":r.sort((r,t)=>t[e]-r[e])}}}},function(e,r){e.exports=function e(r,t,s,o){if("function"!=typeof s)throw new Error("method for before hook must be a function");o||(o={});if(Array.isArray(t))return t.reverse().reduce((function(t,s){return e.bind(null,r,s,t,o)}),s)();return Promise.resolve().then((function(){return r.registry[t]?r.registry[t].reduce((function(e,r){return r.hook.bind(null,e,o)}),s)():s(o)}))}},function(e,r){e.exports=function(e,r,t,s){var o=s;e.registry[t]||(e.registry[t]=[]);"before"===r&&(s=function(e,r){return Promise.resolve().then(o.bind(null,r)).then(e.bind(null,r))});"after"===r&&(s=function(e,r){var t;return Promise.resolve().then(e.bind(null,r)).then((function(e){return o(t=e,r)})).then((function(){return t}))});"error"===r&&(s=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch((function(e){return o(e,r)}))});e.registry[t].push({hook:s,orig:o})}},function(e,r){e.exports=function(e,r,t){if(!e.registry[r])return;var s=e.registry[r].map((function(e){return e.orig})).indexOf(t);if(-1===s)return;e.registry[r].splice(s,1)}},function(e,r){e.exports=function e(r,t){if(r&&t)return e(r)(t);if("function"!=typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach((function(e){s[e]=r[e]})),s;function s(){for(var e=new Array(arguments.length),t=0;t<e.length;t++)e[t]=arguments[t];var s=r.apply(this,e),o=e[e.length-1];return"function"==typeof s&&s!==o&&Object.keys(o).forEach((function(e){s[e]=o[e]})),s}}},function(e,r,t){"use strict";function s(){try{return navigator.userAgent}catch(e){return"<environment unknown>"}}t.r(r),t.d(r,"getUserAgent",(function(){return s}))},function(e,r){e.exports=function(e){let r=0;try{[r]=e.split("/")[8].split("=")[1].split(">")}catch(e){r=1,console.error(e)}return r}},function(e,r){function t({index:e,octokit:r}){const t=`/user/starred?page=${e}`;return r.request(t)}e.exports={getOnePageRepositories:t,getLeftPagesRepositories:async function({pageLength:e,octokit:r}){let s=[];const o=[];for(let e=2;e<=5;e++)o.push(t({index:e,octokit:r}));return(await Promise.all(o)).forEach(e=>{s=s.concat(e.data)}),s}}},function(e,r,t){const s=t(17);e.exports=async function(e,r){const t=[],o=[];return e.forEach(e=>{const n=e.full_name;o.push(s({repoName:n,token:r})),t.push({repoName:e.full_name,htmlUrl:e.html_url,stars:e.stargazers_count,mainLanguage:e.language||"",description:e.description})}),(await Promise.all(o)).forEach((e,r)=>{t[r].loc=e}),t}},function(e,r,t){const{Octokit:s}=t(2),o=t(18);e.exports=async function({repoName:e,token:r}){const t=new s({auth:r}),n=`/repos/${e}/stats/code_frequency`;let i;try{const e=await t.request(n);i=o(e.data)}catch(e){i=0}return i}},function(e,r){e.exports=e=>e.reduce((e,r)=>e+r[1]+r[2],0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,